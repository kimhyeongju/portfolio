name: Portfolio CI/CD Pipeline

# 트리거 조건
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # 수동 실행 가능

# 환경 변수
env:
  DOCKER_IMAGE_NAME: hyeongju6/portfolio
  CHATBOT_IMAGE_NAME: hyeongju6/chatbot-api
  JAVA_VERSION: '21'

jobs:
  # Job 1: 테스트 및 빌드
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Java 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. 테스트 실행 (H2 데이터베이스 사용)
      - name: Run tests
        run: ./gradlew test --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test

      # 6. 애플리케이션 빌드
      - name: Build application
        run: ./gradlew build -x test --no-daemon

      # 7. 빌드 결과물 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar
          retention-days: 1

  # Job 2: Docker 이미지 빌드 및 푸시
  docker-build-push:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # main 브랜치에서만 실행
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 빌드 결과물 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/

      # 3. Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 5. Spring Boot 이미지 빌드 및 푸시
      - name: Build and push Spring Boot image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 6. Flask API 이미지 빌드 및 푸시
      - name: Build and push Flask API image
        uses: docker/build-push-action@v5
        with:
          context: ./chatbot-api
          platforms: linux/amd64
          push: true
          tags: ${{ env.CHATBOT_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: EC2 배포
  deploy-to-ec2:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      # 1. EC2에 SSH 연결하여 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # 환경변수 설정
            export PORTFOLIO_IMAGE="${{ env.DOCKER_IMAGE_NAME }}:latest"
            export CHATBOT_IMAGE="${{ env.CHATBOT_IMAGE_NAME }}:latest"
            export OPENAI_KEY="${{ secrets.OPENAI_API_KEY }}"
            
            echo "=== Starting Deployment ==="
            echo "Portfolio Image: $PORTFOLIO_IMAGE"
            echo "Chatbot Image: $CHATBOT_IMAGE"
            echo "OpenAI Key Status: $([ -n "$OPENAI_KEY" ] && echo 'Set' || echo 'Not Set')"

            # 모든 기존 컨테이너 중지 및 제거
            echo "=== Stopping existing containers ==="
            sudo docker stop portfolio-app portfolio-web chatbot-api 2>/dev/null || true
            sudo docker rm portfolio-app portfolio-web chatbot-api 2>/dev/null || true

            # 기존 docker-compose 정리
            sudo docker-compose down 2>/dev/null || true

            # 기존 이미지 제거 (새 이미지 강제 다운로드)
            echo "=== Removing old images ==="
            sudo docker rmi $PORTFOLIO_IMAGE $CHATBOT_IMAGE 2>/dev/null || true

            # Docker Compose 파일 생성
            echo "=== Creating docker-compose.yml ==="
            cat > docker-compose.yml << EOF
            version: '3.8'
            services:
              portfolio-web:
                image: $PORTFOLIO_IMAGE
                container_name: portfolio-web
                ports:
                  - "80:8080"
                environment:
                  - CHATBOT_API_URL=http://chatbot-api:5000
                  - SPRING_PROFILES_ACTIVE=prod
                depends_on:
                  - chatbot-api
                restart: unless-stopped
                mem_limit: 400m
                mem_reservation: 300m
                networks:
                  - portfolio-network

              chatbot-api:
                image: $CHATBOT_IMAGE
                container_name: chatbot-api
                ports:
                  - "5000:5000"
                environment:
                  - OPENAI_API_KEY=$OPENAI_KEY
                restart: unless-stopped
                mem_limit: 200m
                mem_reservation: 150m
                networks:
                  - portfolio-network

            networks:
              portfolio-network:
                driver: bridge
            EOF

            # 최신 이미지 풀
            echo "=== Pulling latest images ==="
            sudo docker pull $PORTFOLIO_IMAGE
            sudo docker pull $CHATBOT_IMAGE

            # 이미지 확인
            echo "=== Available images ==="
            sudo docker images | grep -E "(portfolio|chatbot)"

            # 새 컨테이너 실행
            echo "=== Starting containers ==="
            sudo docker-compose up -d

            # 컨테이너 시작 대기
            echo "=== Waiting for containers to start ==="
            sleep 45

            # 컨테이너 상태 확인
            echo "=== Container status ==="
            sudo docker ps -a

            # 네트워크 확인
            echo "=== Network status ==="
            sudo docker network ls | grep portfolio

            # 서비스 응답 확인
            echo "=== Testing services ==="
            
            # Spring Boot 서비스 테스트
            echo "Testing Portfolio Web Service..."
            WEB_SUCCESS=false
            for i in {1..15}; do
              if curl -f -s http://localhost/ > /dev/null 2>&1; then
                echo "✅ Portfolio web service is responding"
                WEB_SUCCESS=true
                break
              else
                echo "⏳ Waiting for portfolio web service... (${i}/15)"
                sleep 5
              fi
            done

            # Flask API 서비스 테스트
            echo "Testing Chatbot API Service..."
            API_SUCCESS=false
            for i in {1..15}; do
              if curl -f -s http://localhost:5000/health > /dev/null 2>&1; then
                echo "✅ Chatbot API service is responding"
                API_SUCCESS=true
                break
              else
                echo "⏳ Waiting for chatbot API service... (${i}/15)"
                sleep 5
              fi
            done

            # 최종 테스트 결과
            echo "=== Service Test Results ==="
            echo "Web Service: $([ "$WEB_SUCCESS" = true ] && echo '✅ OK' || echo '❌ FAILED')"
            echo "API Service: $([ "$API_SUCCESS" = true ] && echo '✅ OK' || echo '❌ FAILED')"

            # 로그 확인
            echo "=== Portfolio Web Logs ==="
            sudo docker logs portfolio-web --tail 30 2>/dev/null || echo "No portfolio-web container found"
            echo "=== Chatbot API Logs ==="
            sudo docker logs chatbot-api --tail 30 2>/dev/null || echo "No chatbot-api container found"

            # 메모리 사용량 확인
            echo "=== System Memory Usage ==="
            free -h
            
            # 컨테이너 리소스 사용량 확인
            echo "=== Container Resource Usage ==="
            if sudo docker ps --format "table {{.Names}}" | grep -q portfolio-web; then
              sudo docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" portfolio-web chatbot-api
            else
              echo "Containers not running, showing all running containers:"
              sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            fi

            # 배포 성공 여부 확인
            if [ "$WEB_SUCCESS" = true ] && [ "$API_SUCCESS" = true ]; then
              echo "🎉 Deployment completed successfully!"
              exit 0
            else
              echo "❌ Deployment failed - some services are not responding"
              exit 1
            fi

  # Job 4: 배포 완료 알림
  notify:
    needs: [test-and-build, docker-build-push, deploy-to-ec2]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-to-ec2.result }}" == "success" ]]; then
            echo "🎉 포트폴리오 + 챗봇 애플리케이션이 EC2에 성공적으로 배포되었습니다!"
            echo "🚀 메인 사이트: http://${{ secrets.EC2_HOST }}"
            echo "🤖 챗봇 페이지: http://${{ secrets.EC2_HOST }}/chatbot"
            echo "🐳 Spring Boot 이미지: ${{ env.DOCKER_IMAGE_NAME }}:latest"
            echo "🐍 Flask API 이미지: ${{ env.CHATBOT_IMAGE_NAME }}:latest"
            echo ""
            echo "📊 서비스 상태:"
            echo "- Portfolio Web: ✅ 정상"
            echo "- Chatbot API: ✅ 정상"
          else
            echo "❌ 배포에 실패했습니다."
            echo "🔍 문제 해결 방법:"
            echo "1. GitHub Actions 로그 확인"
            echo "2. EC2 인스턴스 메모리 상태 확인"
            echo "3. Docker 컨테이너 로그 확인"
            echo ""
            echo "🛠️ 수동 확인 명령어:"
            echo "sudo docker ps -a"
            echo "sudo docker logs portfolio-web"
            echo "sudo docker logs chatbot-api"
          fi